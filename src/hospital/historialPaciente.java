/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospital;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author crist
 */
public class historialPaciente extends javax.swing.JFrame {

    /**
     * Creates new form historialPaciente
     */
    private int idMed;
    
    public historialPaciente(int idMed) {
        initComponents();
        this.idMed = idMed;
    }

    private historialPaciente() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public int getIdMed(){
        return idMed;
    }
    
    public void setIdeMed(int idMed){
        this.idMed = idMed;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnFiltrar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableHistorial = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtPaciente = new javax.swing.JTextField();
        btnPacientes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(java.awt.Color.lightGray);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Historial Médico");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(480, 480, 480))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnFiltrar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnFiltrar.setText("Filtrar");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        jButton1.setBackground(java.awt.Color.red);
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setText("Cerrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tableHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Bitácora", "Médico", "Paciente", "Diagnóstico", "Consultorio", "Fecha", "Total a Pagar"
            }
        ));
        jScrollPane2.setViewportView(tableHistorial);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("ID Paciente*:");

        txtPaciente.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        btnPacientes.setBackground(java.awt.Color.cyan);
        btnPacientes.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnPacientes.setText("Mis Pacientes");
        btnPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPacientesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPacientes)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(460, 460, 460)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFiltrar)
                .addGap(0, 471, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFiltrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
        // TODO add your handling code here:
        String campo = txtPaciente.getText();
        if(campo.isEmpty()){
            JOptionPane.showMessageDialog(null, "Por favor ingrese un ID para poder filtrar la tabla");
        }else{
            int idPac = Integer.parseInt(campo);
            if(validarPaciente(idPac)){
                mostrarDatos(idPac);
            }
        }

    }//GEN-LAST:event_btnFiltrarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        hide();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPacientesActionPerformed
        // TODO add your handling code here:
        verPacientes v = new verPacientes();
        v.setVisible(true);
        v.setLocationRelativeTo(null);
        v.mostrar(getIdMed());
    }//GEN-LAST:event_btnPacientesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(historialPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(historialPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(historialPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(historialPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new historialPaciente().setVisible(true);
            }
        });
    }
    
    public boolean validarPaciente(int idPac){
        conexion conectar = new conexion();
        Statement st = conectar.Conectar();
        boolean validar = false;
        try{
            ResultSet rs = st.executeQuery("SELECT COUNT(*) AS existe FROM Paciente WHERE idPac="+idPac);
            if(rs.next()){
                int validacion = rs.getInt("existe");
                if(validacion > 0){
                    // Existe el paciente en la bd
                    rs = st.executeQuery("SELECT COUNT(*) AS existe FROM Cita WHERE idPac="+idPac+" AND idMed="+getIdMed());
                    if(rs.next()){
                        validacion = rs.getInt("existe");
                        if(validacion > 0){
                            // El paciente si es paciente del médico
                            validar = true;
                        }else{
                            // El paciente no es paciente del médico
                            JOptionPane.showMessageDialog(null, "El paciente con dicho ID no tiene relación con el médico");
                            validar = false;
                        }
                    }
                }else{
                    // No existe el paciente con dicho id en la bd
                    JOptionPane.showMessageDialog(null, "No existe ningún registro de algún paciente con dicho ID");
                    validar = false;
                }
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        return validar;
    }
    
    public void mostrarDatos(int idPac){
        String [] nombreColumnas = {"ID Bitácora","Médico","Paciente","Diagnóstico","Consultorio","Fecha","Total"};
        String [] registros = new String[7];
        DefaultTableModel modelo = new DefaultTableModel(null,nombreColumnas);
        conexion conectar = new conexion();
        Statement st = conectar.Conectar();
        try{
            ResultSet rs = st.executeQuery("SELECT e.idExpediente, um.nombre+' '+um.paterno+' '+um.materno AS 'Doctor', u.nombre+' '+u.paterno+' '+u.materno AS 'Paciente', r.diagnostico, c.consultorio, CONVERT(VARCHAR, c.fecha, 23) AS 'Fecha', r.idReceta, c.precio FROM Paciente p JOIN Expediente e ON p.idPac=e.idPac JOIN Usuario u ON p.email=u.email JOIN Cita c ON p.idPac=c.idPac JOIN Medico m ON c.idMed=m.idMed JOIN Usuario um ON m.email=um.email JOIN Receta r ON c.idCita=r.idCita WHERE c.estadoCita=3 AND p.idPac="+idPac);
            while(rs.next()){
                registros[0] = rs.getString("idExpediente");
                registros[1] = rs.getString("Doctor");
                registros[2] = rs.getString("Paciente");
                registros[3] = rs.getString("diagnostico");
                registros[4] = rs.getString("consultorio");
                registros[5] = rs.getString("Fecha");
                int idReceta = Integer.parseInt(rs.getString("idReceta"));
                double precio = Double.parseDouble(rs.getString("precio"));
                double total = sumaMedicamentos(idReceta,precio);
                registros[6] = Double.toString(total);
                modelo.addRow(registros);
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        tableHistorial.setModel(modelo);
    }
    
    public double sumaMedicamentos(int idReceta, double precio) {
        double sumaMeds = 0;
        double total = 0;
        conexion conectar = new conexion();
        Statement st = conectar.Conectar();

        try {
            ResultSet rs = st.executeQuery("SELECT SUM(m.precio) AS 'Suma' FROM Receta r JOIN RecetaMedicamento rm ON r.idReceta=rm.idReceta JOIN Medicamento m ON rm.idMedicamento=m.idMedicamento WHERE r.idReceta=" + idReceta);
            while (rs.next()) {
                sumaMeds = rs.getDouble("Suma");
                total = sumaMeds + precio;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return total;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JButton btnPacientes;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableHistorial;
    private javax.swing.JTextField txtPaciente;
    // End of variables declaration//GEN-END:variables
}
