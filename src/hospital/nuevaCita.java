/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospital;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author crist
 */
public class nuevaCita extends javax.swing.JFrame {

    /**
     * Creates new form nuevaCita
     */
    private int idRec;
    
    public nuevaCita(int idRec) {
        initComponents();
        this.idRec = idRec;
    }
    
    private nuevaCita() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public int getIdRec(){
        return idRec;
    }
    
    public void setIdRec(int idRec){
        this.idRec = idRec;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtPaciente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        horaCita = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDoctor = new javax.swing.JTextField();
        jDate = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtConsultorio = new javax.swing.JTextField();
        btnMedicos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registro Cita");

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));
        jPanel1.setForeground(java.awt.Color.orange);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Registrar Cita");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(137, 137, 137))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setBackground(java.awt.Color.red);
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel2.setText("Correo del Paciente*:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel3.setText("Hora cita*:");

        horaCita.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        horaCita.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00", " ", " " }));

        jButton1.setBackground(java.awt.Color.green);
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setText("Agendar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel4.setText("Precio*:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel5.setText("ID Médico*:");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel6.setText("Fecha*:");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel7.setText("Consultorio*:");

        btnMedicos.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnMedicos.setText("Médicos");
        btnMedicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedicosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtConsultorio, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(btnMedicos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(horaCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addComponent(jDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(horaCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtConsultorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(btnMedicos))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        hide();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String fechaFormateada = "";
        java.util.Date hoy = new java.util.Date();
        
        // Obtenemos los datos del registro
        String emailPaciente = txtPaciente.getText();
        int idMedico = Integer.parseInt(txtDoctor.getText());
        double precio = Double.parseDouble(txtPrecio.getText());
        int consultorio = Integer.parseInt(txtConsultorio.getText());
        java.util.Date fecha = jDate.getDate();
        //System.out.println(fecha);
        String hora = horaCita.getSelectedItem().toString();
        
        // Validamos que no sean datos vacíos
        if(emailPaciente.isEmpty() || hora.isEmpty()){
            JOptionPane.showMessageDialog(null, "Es necesario llenar todos los campos");
        }else if(idMedico == -1 || precio == -1){
            JOptionPane.showMessageDialog(null, "Es necesario llenar todos los campos");
        }else if(fecha.before(hoy)){
            JOptionPane.showMessageDialog(null, "La fecha no puede ser anterior a la actual");
            hide();
        }else{
            conexion conectar = new conexion();
            Statement st = conectar.Conectar();
            fechaFormateada = formatoFecha(fecha);
        System.out.println(fechaFormateada);
        
        // Validamos la fecha y hora en la base de datos
        if(validarFecha(hora,fechaFormateada,consultorio)){
            // Es válida
            JOptionPane.showMessageDialog(null, "Fecha y hora disponible");
            // Insertamos la cita en la bd
            int idPac = getIdPaciente(emailPaciente);
            if(idPac != 0){
                if(validarMedico(idMedico)){
                    insertarCita(idPac,idMedico,precio,fechaFormateada,hora,getIdRec(),consultorio);
                }else{
                    JOptionPane.showMessageDialog(null, "No existe ningún médico con dicho id");
                }
            }else{
                JOptionPane.showMessageDialog(null, "No existe ningún paciente con dicho email");
            }
        }else{
            // No es válida
            JOptionPane.showMessageDialog(null, "Ya existe una cita con esa la misma fecha, hora y consultorio, por favor cambie estos datos");
        }
        }
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnMedicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedicosActionPerformed
        // TODO add your handling code here:
        verMedicos m = new verMedicos();
        m.mostrar();
        m.setVisible(true);
        m.setLocationRelativeTo(null);
    }//GEN-LAST:event_btnMedicosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(nuevaCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(nuevaCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(nuevaCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(nuevaCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new nuevaCita().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMedicos;
    private javax.swing.JComboBox<String> horaCita;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private com.toedter.calendar.JDateChooser jDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtConsultorio;
    private javax.swing.JTextField txtDoctor;
    private javax.swing.JTextField txtPaciente;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables

    public String formatoFecha(java.util.Date fecha) {
        DateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        String fechaFormat = formato.format(fecha);
        return fechaFormat;
    }
    
    public Boolean validarFecha(String hora, String fecha, int consultorio){
        conexion conectar = new conexion();
        Statement st = conectar.Conectar();
        Boolean existe = false;
        // Validar fecha de la cita
        try{
           ResultSet rs = st.executeQuery("SELECT COUNT(*) AS existe FROM Cita WHERE fecha='"+fecha+"' AND horaCita='"+hora+"' AND consultorio="+consultorio+"");
           if(rs.next()){
               int validacion = rs.getInt("existe");
               if(validacion > 0){
                   existe = false;
               }else{
                   existe = true;
               }
           }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        return existe;
    }
    
    public void insertarCita(int idPac, int idMedico, double precio, String fecha, String hora, int idRec, int consultorio){
        int edoCita = 1;
        conexion conectar = new conexion();
        Statement st = conectar.Conectar(); 
        try{
            String insertarCita = "INSERT INTO Cita (idRec,idMed,idPac,fecha,estadoCita,precio,horaCita,consultorio) VALUES ("+idRec+","+idMedico+","+idPac+",'"+fecha+"',"+edoCita+","+precio+",'"+hora+"',"+consultorio+")";
            int filasInsertadas = st.executeUpdate(insertarCita);
            if(filasInsertadas > 0){
                JOptionPane.showMessageDialog(null, "Se agendó la cita correctamente");
                txtPaciente.setText("");
                txtDoctor.setText("");
                txtPrecio.setText("");
                txtConsultorio.setText("");
                comprobanteCita c = new comprobanteCita();
                c.mostrarComprobante(fecha,hora,consultorio);
            }else{
                JOptionPane.showMessageDialog(null, "No se pudo agendar la cita");
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
    
    public int getIdPaciente(String email){
        conexion conectar = new conexion();
        Statement st = conectar.Conectar();
        int idPaciente = 0;
        
        try{
            ResultSet rs = st.executeQuery("SELECT COUNT(*) AS existe FROM Paciente WHERE email='"+email+"'");
            if(rs.next()){
                int validacion = rs.getInt("existe");
                if(validacion > 0){
                    // Existe el paciente en la bd
                    rs = st.executeQuery("SELECT idPac FROM Paciente WHERE email='"+email+"'");
                    while(rs.next()){
                        idPaciente = rs.getInt("idPac");
                    }
                }else{
                    // No existe el paciente en la bd
                }
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        return idPaciente;
    }
    
    public boolean validarMedico(int id){
        conexion conectar = new conexion();
        Statement st = conectar.Conectar();
        boolean validar = false;
        try{
            ResultSet rs = st.executeQuery("SELECT COUNT(*) AS existe FROM Medico WHERE idMed="+id);
            if(rs.next()){
                int validacion = rs.getInt("existe");
                if(validacion > 0){
                    // Existe el medico en la bd
                    validar = true;
                }else{
                    // No existe el medico con dicho id en la bd
                    validar = false;
                }
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        return validar;
    }
    
    /*public void initCombos(){
        
    }*/
    
}
